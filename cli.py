"""Command line interface for CleverLama."""

import subprocess
import sys
from pathlib import Path

import click
import requests
from rich.console import Console
from rich.table import Table

from src.clever_lama import __version__
from src.clever_lama.constants import RESPONSE_CODE_OK

console = Console()


def run_command(
    command: str, *, shell: bool = True
) -> subprocess.CompletedProcess | None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        result = subprocess.run(
            command, shell=shell, capture_output=True, text=True, check=False
        )

        if result.returncode != 0:
            console.print(
                f'‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º {result.returncode}', style='red'
            )
            return None

    except subprocess.CalledProcessError as e:
        console.print(f'‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}', style='red')
        return None
    else:
        return result


def check_docker() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Docker."""
    try:
        check_result = subprocess.run(
            ['docker', '--version'],  # noqa: S607
            capture_output=True,
            text=True,
            check=False,
        )

        if check_result.returncode == 0:
            return True
        console.print('‚ùå Docker –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω', style='red')

    except FileNotFoundError:
        console.print('‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', style='red')
        return False
    else:
        return False


def check_docker_compose() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Docker Compose."""
    try:
        check_result = subprocess.run(
            ['docker', 'compose', 'version'],  # noqa: S607
            capture_output=True,
            text=True,
            check=False,
        )

        if check_result.returncode == 0:
            return True
        console.print('‚ùå Docker Compose –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω', style='red')

    except FileNotFoundError:
        console.print('‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', style='red')
        return False
    else:
        return False


@click.group()
def cli() -> None:
    """CleverLama CLI - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –º–æ—Å—Ç–æ–º."""


@cli.command()
def start() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ Docker Compose."""
    if not check_docker() or not check_docker_compose():
        sys.exit(1)

    console.print('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º CleverLama...', style='green')
    result = run_command('docker compose up -d')

    if result and result.returncode == 0:
        console.print('‚úÖ CleverLama —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω', style='green')
        console.print(
            'üì° –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:11434', style='blue'
        )
    else:
        console.print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ CleverLama', style='red')
        sys.exit(1)


@cli.command()
def stop() -> None:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å."""
    if not check_docker() or not check_docker_compose():
        sys.exit(1)

    console.print('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CleverLama...', style='yellow')
    result = run_command('docker compose down')

    if result and result.returncode == 0:
        console.print('‚úÖ CleverLama —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', style='green')
    else:
        console.print('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ CleverLama', style='red')
        sys.exit(1)


@cli.command()
def restart() -> None:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å."""
    if not check_docker() or not check_docker_compose():
        sys.exit(1)

    console.print('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º CleverLama...', style='yellow')

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    result = run_command('docker compose down')
    if not result or result.returncode != 0:
        console.print('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ CleverLama', style='red')
        sys.exit(1)

    # –ó–∞–ø—É—Å–∫–∞–µ–º
    result = run_command('docker compose up -d')
    if result and result.returncode == 0:
        console.print('‚úÖ CleverLama —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω', style='green')
        console.print(
            'üì° –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:11434', style='blue'
        )
    else:
        console.print('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ CleverLama', style='red')
        sys.exit(1)


@cli.command()
def status() -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞."""
    if not check_docker() or not check_docker_compose():
        sys.exit(1)

    console.print('üìä –°—Ç–∞—Ç—É—Å CleverLama:', style='blue')
    result = run_command('docker compose ps')

    if result:
        console.print(result.stdout)


@cli.command()
def logs() -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞."""
    if not check_docker() or not check_docker_compose():
        sys.exit(1)

    console.print('üìù –õ–æ–≥–∏ CleverLama:', style='blue')
    result = run_command('docker compose logs -f --tail=50')

    if result:
        console.print(result.stdout)


@cli.command()
@click.option(
    '--follow', '-f', is_flag=True, help='–°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏'
)
@click.option('--tail', '-n', default=50, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤')
def tail(*, follow: bool, tail_: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞."""
    if not check_docker() or not check_docker_compose():
        sys.exit(1)

    console.print(f'üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ {tail_} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ CleverLama:', style='blue')

    command = f'docker compose logs --tail={tail_}'
    if follow:
        command += ' -f'

    result = run_command(command)
    if result:
        console.print(result.stdout)


@cli.command()
def build() -> None:
    """–°–æ–±–∏—Ä–∞–µ—Ç Docker –æ–±—Ä–∞–∑ –∑–∞–Ω–æ–≤–æ."""
    if not check_docker() or not check_docker_compose():
        sys.exit(1)

    console.print('üî® –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º CleverLama...', style='blue')
    result = run_command('docker compose build --no-cache')

    if result and result.returncode == 0:
        console.print('‚úÖ CleverLama —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω', style='green')
    else:
        console.print('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ CleverLama', style='red')
        sys.exit(1)


@cli.command()
def clean() -> None:
    """–û—á–∏—â–∞–µ—Ç Docker —Ä–µ—Å—É—Ä—Å—ã."""
    if not check_docker() or not check_docker_compose():
        sys.exit(1)

    console.print('üßπ –û—á–∏—â–∞–µ–º Docker —Ä–µ—Å—É—Ä—Å—ã...', style='yellow')

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    result = run_command('docker compose down --rmi all --volumes --remove-orphans')

    if result and result.returncode == 0:
        console.print('‚úÖ Docker —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã', style='green')
    else:
        console.print('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Docker —Ä–µ—Å—É—Ä—Å–æ–≤', style='red')
        sys.exit(1)


@cli.command()
def test() -> None:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API."""
    console.print('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API CleverLama...', style='blue')

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º health check
        response = requests.get('http://localhost:11434/', timeout=10)
        if response.status_code == RESPONSE_CODE_OK:
            console.print('‚úÖ Health check –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ', style='green')
        else:
            console.print(
                f'‚ùå Health check failed: {response.status_code}', style='red'
            )
            return

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        response = requests.get('http://localhost:11434/api/tags', timeout=10)
        if response.status_code == RESPONSE_CODE_OK:
            models = response.json()
            console.print('‚úÖ API –º–æ–¥–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç', style='green')
            console.print(
                f'üì¶ –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models.get("models", []))}', style='blue'
            )
        else:
            console.print(
                f'‚ùå API –º–æ–¥–µ–ª–µ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}', style='red'
            )

    except requests.RequestException as e:
        console.print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}', style='red')


@cli.command()
def config() -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
    console.print('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CleverLama:', style='blue')

    # –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    env_file = Path('.env')
    if env_file.exists():
        with env_file.open('r', encoding='utf-8') as f:
            env_content = f.read()

        table = Table(title='–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
        table.add_column('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è', style='cyan')
        table.add_column('–ó–Ω–∞—á–µ–Ω–∏–µ', style='green')

        for line in env_content.strip().split('\n'):
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                # –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if (
                    'KEY' in key.upper()
                    or 'PASSWORD' in key.upper()
                    or 'SECRET' in key.upper()
                ):
                    value = '***–°–ö–†–´–¢–û***'
                table.add_row(key, value)

        console.print(table)
    else:
        console.print('üìÑ –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω', style='yellow')


@cli.command()
def info() -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ."""
    table = Table(title='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ')
    table.add_column('–ü–∞—Ä–∞–º–µ—Ç—Ä', style='cyan')
    table.add_column('–ó–Ω–∞—á–µ–Ω–∏–µ', style='green')

    # –í–µ—Ä—Å–∏—è CleverLama
    table.add_row('CleverLama –≤–µ—Ä—Å–∏—è', __version__)

    # –í–µ—Ä—Å–∏—è Python
    table.add_row('Python –≤–µ—Ä—Å–∏—è', sys.version.split()[0])
    table.add_row('Python –ø—É—Ç—å', sys.executable)

    # Docker –≤–µ—Ä—Å–∏–∏
    try:
        docker_result = subprocess.run(
            ['docker', '--version'],  # noqa: S607
            capture_output=True,
            text=True,
            check=False,
        )
        if docker_result.returncode == 0:
            docker_version = docker_result.stdout.strip()
            table.add_row('Docker', docker_version)
        else:
            table.add_row('Docker', '‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω')
    except FileNotFoundError:
        table.add_row('Docker', '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

    try:
        compose_result = subprocess.run(
            ['docker', 'compose', 'version'],  # noqa: S607
            capture_output=True,
            text=True,
            check=False,
        )
        if compose_result.returncode == 0:
            compose_version = compose_result.stdout.strip()
            table.add_row('Docker Compose', compose_version)
        else:
            table.add_row('Docker Compose', '‚ùå –ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω')
    except FileNotFoundError:
        table.add_row('Docker Compose', '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Python
    table.add_row('Python –≤–µ—Ä—Å–∏—è', sys.version.split()[0])
    table.add_row('Python –ø—É—Ç—å', sys.executable)

    console.print(table)


if __name__ == '__main__':
    cli()
